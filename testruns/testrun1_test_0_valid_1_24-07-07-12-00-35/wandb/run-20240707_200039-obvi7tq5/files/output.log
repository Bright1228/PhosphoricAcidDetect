24/07/07 20:00:51 - INFO - __main__ -   torch seed: 505652736489000
24/07/07 20:00:51 - INFO - __main__ -   Saving to testruns\testrun1_test_0_valid_1_24-07-07-12-00-35
24/07/07 20:00:51 - INFO - __main__ -   Loading pretrained model in Rostlab/prot_bert
e:\signalp-6.0-main\src\signalp6\models\multi_tag_crf.py:123: UserWarning: where received a uint8 condition tensor. This behavior is deprecated and will be removed in a future version of PyTorch. Use a boolean condition instead. (Triggered internally at C:\actions-runner\_work\pytorch\pytorch\builder\windows\pytorch\aten\src\ATen\native\TensorCompare.cpp:530.)
  self.transitions.data = torch.where(
Some weights of BertSequenceTaggingCRF were not initialized from the model checkpoint at Rostlab/prot_bert and are newly initialized: ['crf._constraint_end_mask', 'crf._constraint_mask', 'crf._constraint_start_mask', 'crf.end_transitions', 'crf.start_transitions', 'crf.transitions', 'outputs_to_emissions.bias', 'outputs_to_emissions.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
24/07/07 20:00:56 - INFO - __main__ -   Loaded weights from Rostlab/prot_bert for model bert
24/07/07 20:00:56 - INFO - __main__ -   Using kingdom IDs as word in sequence, extending embedding layer of pretrained model.
24/07/07 20:00:56 - INFO - __main__ -   Training on [2], validating on 1
24/07/07 20:00:56 - INFO - __main__ -   Using labels for SP region prediction.
24/07/07 20:00:56 - INFO - __main__ -   7002 training sequences, 7392 validation sequences.
24/07/07 20:00:56 - INFO - __main__ -   Data loaded. One epoch = 88 batches.
24/07/07 20:00:56 - INFO - __main__ -   Logging experiment as testrun1_0_1_24-07-07-12-00-35 to wandb/tensorboard
24/07/07 20:00:56 - INFO - __main__ -   Saving checkpoints at testruns\testrun1_test_0_valid_1_24-07-07-12-00-35
24/07/07 20:00:58 - INFO - __main__ -   Model set up!
24/07/07 20:00:58 - INFO - __main__ -   Model has 407384520 trainable parameters
24/07/07 20:00:58 - INFO - __main__ -   Running model on cpu, not using nvidia apex
24/07/07 20:00:58 - INFO - __main__ -   Starting epoch 1
Traceback (most recent call last):
  File "E:\PhosphoricAcidDetect\PhosphoricAcidDetect\scripts\train_model.py", line 1213, in <module>
    main_training_loop(args)
  File "E:\PhosphoricAcidDetect\PhosphoricAcidDetect\scripts\train_model.py", line 899, in main_training_loop
    epoch_loss, global_step = train(
  File "E:\PhosphoricAcidDetect\PhosphoricAcidDetect\scripts\train_model.py", line 371, in train
    nh, hc = compute_cosine_region_regularization(
  File "e:\signalp-6.0-main\src\signalp6\training_utils\cosine_similarity_regularization.py", line 149, in compute_cosine_region_regularization
    n_h_masking_indices = torch_isin(global_label_ids, N_H_IGNORE_CLASSES)
  File "e:\signalp-6.0-main\src\signalp6\training_utils\cosine_similarity_regularization.py", line 72, in torch_isin
    bool_tensor = (element.unsqueeze(-1) == test_elements).any(-1)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!